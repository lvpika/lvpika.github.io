<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CatLoveFish</title>
  
  <subtitle>BoNiu</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lvpika.github.io/"/>
  <updated>2020-04-29T09:07:39.532Z</updated>
  <id>http://lvpika.github.io/</id>
  
  <author>
    <name>BoNiu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>English Homework 调查小组旅游地点等等 编写小作文</title>
    <link href="http://lvpika.github.io/2020/04/29/undefined/"/>
    <id>http://lvpika.github.io/2020/04/29/undefined/</id>
    <published>2020-04-29T09:00:36.000Z</published>
    <updated>2020-04-29T09:07:39.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="English-HomeWork"><a href="#English-HomeWork" class="headerlink" title="English HomeWork"></a>English HomeWork</h1><h2 id="Brief-Table"><a href="#Brief-Table" class="headerlink" title="Brief Table"></a>Brief Table</h2><table><thead><tr><th>Name</th><th>Where</th><th>What</th><th>How</th><th>Who</th></tr></thead><tbody><tr><td>Xiao Hua</td><td>Beijing</td><td>visited Tian anmen</td><td>very nice</td><td>with my father</td></tr><tr><td>Xiao Gang</td><td>Wulong</td><td>visited Fairy mountain</td><td>interesting</td><td>with my friend</td></tr><tr><td>Hua Hua</td><td>stayed at home</td><td>read book</td><td>boring</td><td>with my sister</td></tr></tbody></table><h2 id="Main-Body"><a href="#Main-Body" class="headerlink" title="Main Body"></a>Main Body</h2><p>……<strong>Hi XiaoGang, did you go on vaction? Yes i did. XiaoHua, and you. Yes i did. Where did you go on vaction? I went to Beijing with my father. Wow, did you go anywhere very nice? Yes, i visited Tiananmen very nice. And you? **<br>……</strong>I went to Wulong with my frieng. I visited Fairy mountain is interesting. Hi HuaHua, Did you go on vaction?**<br>……<strong>No, i didn’t. I stayed at home with my sister. i most of read book the time. i think very boring.</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;English-HomeWork&quot;&gt;&lt;a href=&quot;#English-HomeWork&quot; class=&quot;headerlink&quot; title=&quot;English HomeWork&quot;&gt;&lt;/a&gt;English HomeWork&lt;/h1&gt;&lt;h2 id=&quot;Brief-Tab
      
    
    </summary>
    
    
      <category term="English HomeWork" scheme="http://lvpika.github.io/categories/English-HomeWork/"/>
    
    
      <category term="English HomeWork" scheme="http://lvpika.github.io/tags/English-HomeWork/"/>
    
  </entry>
  
  <entry>
    <title>解决将博客搭建在服务器上访问文章出现404错误码</title>
    <link href="http://lvpika.github.io/2020/04/26/undefined/"/>
    <id>http://lvpika.github.io/2020/04/26/undefined/</id>
    <published>2020-04-26T13:19:31.000Z</published>
    <updated>2020-04-26T13:20:32.606Z</updated>
    
    <content type="html"><![CDATA[<h4 id="博客解决url不支持中文的问题"><a href="#博客解决url不支持中文的问题" class="headerlink" title="博客解决url不支持中文的问题"></a>博客解决url不支持中文的问题</h4><p>把博客发布在服务器上时，很有可能遇到点击阅读文章时发现出现404错误码<br>这时候大多数可以看到浏览器地址栏中的url中含有中文，这时候就可能是你的服务器不支持中文url，所以需要在博客配置文件中做以下配置</p><p>在博客主目录的主配置文件中搜索 “permalink”可以看到它的键值默认是<br><code>year/:month/:day/:title/</code><br>将最后面的title改成time即可</p><p>原理就是一般博客文章的url连接都是日期加上文章标题，但是作为中国人，文章标题中含有中文那是肯定的，所以在访问文章的时候会出现404所以将url改为日期加上时间戳即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;博客解决url不支持中文的问题&quot;&gt;&lt;a href=&quot;#博客解决url不支持中文的问题&quot; class=&quot;headerlink&quot; title=&quot;博客解决url不支持中文的问题&quot;&gt;&lt;/a&gt;博客解决url不支持中文的问题&lt;/h4&gt;&lt;p&gt;把博客发布在服务器上时，很有可能遇到
      
    
    </summary>
    
    
      <category term="博客" scheme="http://lvpika.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://lvpika.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Java一维数组详解</title>
    <link href="http://lvpika.github.io/2020/03/27/undefined/"/>
    <id>http://lvpika.github.io/2020/03/27/undefined/</id>
    <published>2020-03-27T13:43:18.000Z</published>
    <updated>2020-03-27T14:07:26.338Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h2><pre><code>1. 数组是一种引用类型2. 数组是一种简单的数据结构，线性的结构3. 数组是一个容器，可以用来存储其它元素4. 数组是可以存储任意数据类型的元素5. 数组中存储的元素类型是统一的6. 数组长度不可改变，一旦创建长度不可改变    如果想要对一个数组扩容，只能是新建一个数组，然后将原数组的内容拷贝到新数组当中，在进行新加入数据</code></pre><h2 id="数组分类"><a href="#数组分类" class="headerlink" title="数组分类"></a>数组分类</h2><pre><code>1. 一维数组2. 二维数组3. 三维数组4. 多维数组</code></pre><h2 id="一维数组的声明"><a href="#一维数组的声明" class="headerlink" title="一维数组的声明"></a>一维数组的声明</h2><pre><code>1. 先确定用来存储什么类型的数据2. 确定好了过后将数组定义成相应的数据类型语法    int[] a1 = {1,2,3,4,5,6};   //这种方式称作：静态初始化    int a1[] = {1,2,3,4,5,6};   //也支持这种方式，但是上面一种好看些</code></pre><h4 id="取得数组中某一个元素"><a href="#取得数组中某一个元素" class="headerlink" title="取得数组中某一个元素"></a>取得数组中某一个元素</h4><pre><code>System.out.println(a1[0]);打印数组中第一个数</code></pre><h4 id="遍历一维数组"><a href="#遍历一维数组" class="headerlink" title="遍历一维数组"></a>遍历一维数组</h4><pre><code>使用 for循环for(i=0;i&lt;a1.length;i++){ System.out.println(a1[i]); }</code></pre><h4 id="修改某个元素的值"><a href="#修改某个元素的值" class="headerlink" title="修改某个元素的值"></a>修改某个元素的值</h4><pre><code>a1[1] =  1000;</code></pre><h2 id="数组的内存分析"><a href="#数组的内存分析" class="headerlink" title="数组的内存分析"></a>数组的内存分析</h2><ol><li><p>数组的引用中存储的是数组首元素在堆内存中的地址，也就是数组那首元素的内存地址作为数对象的内存地址</p></li><li><p>数组中每一个元素都有下标（索引），从0开始，任何一个数组都有一个length属性用来获取数组中元素的个数（也是数组长度），数组中最后一个元素的下标就是，数组长度-1</p></li><li><p>数组通过元素的下标获取元素</p><pre><code>(1) 取得第一个元素：数组名[0](2) 取得最后一个元素：数组名[数组名.length-1]</code></pre></li><li><p>数组的优点：查找效率高</p></li><li><p>数组缺点：队医的增删元素效率低</p></li><li><p>以下是数组的内存图（省略了方法区内存）<br><img src="/" alt="arry.png" class="lazyload" data-src="/2020/03/27/undefined/arry.png"></p></li></ol><h3 id="注意：有100个元素的数组和有10000个元素的数组查找数据的效率是差不多的"><a href="#注意：有100个元素的数组和有10000个元素的数组查找数据的效率是差不多的" class="headerlink" title="注意：有100个元素的数组和有10000个元素的数组查找数据的效率是差不多的"></a>注意：有100个元素的数组和有10000个元素的数组查找数据的效率是差不多的</h3><ol><li>因为 数组存储的数据类型都是一样的，内存空间大小也就一样，然后数组的存储又是有顺序的，所以只要知道第一个元素的内存地址和下标，在知道要查找元素的下标，在用下标计算出和第一个元素的偏移量，在由某个算法用偏移量就可以计算出要查找的数据的内存地址，然后就可以直接通过内存地址定位到那个元素</li></ol><h2 id="动态初始化一维数组"><a href="#动态初始化一维数组" class="headerlink" title="动态初始化一维数组"></a>动态初始化一维数组</h2><pre><code>1. 语法    int[] a1 = new int[4];        动态申明一个一维数组最多可以存储4个元素        动态初始化一维数组，会在堆内存中先创建这个数组的内存，然后值都采用默认值        byte，short，int，long 0        float，double 0.0        boolean false        char \u0000        引用 null</code></pre><h2 id="什么时候用静态初始化，什么时候用动态初始化"><a href="#什么时候用静态初始化，什么时候用动态初始化" class="headerlink" title="什么时候用静态初始化，什么时候用动态初始化"></a>什么时候用静态初始化，什么时候用动态初始化</h2><pre><code>1. 无论是静态初始化还是动态初始化，最终的内存分布都是一样的。2. 如果在创建数组的时候，知道数组中应该存储哪些数据，这个时候当然采用静态初始化方式。3. 如果在创建数组的时候，不知道数组中要存储哪些数据，只要先开辟空间，则使用动态初始化方式</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数组：&quot;&gt;&lt;a href=&quot;#数组：&quot; class=&quot;headerlink&quot; title=&quot;数组：&quot;&gt;&lt;/a&gt;数组：&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. 数组是一种引用类型
2. 数组是一种简单的数据结构，线性的结构
3. 数组是一个容器，可以用来存储其它元素
4
      
    
    </summary>
    
    
      <category term="Java" scheme="http://lvpika.github.io/categories/Java/"/>
    
      <category term="数组" scheme="http://lvpika.github.io/categories/Java/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="Java" scheme="http://lvpika.github.io/tags/Java/"/>
    
      <category term="数组" scheme="http://lvpika.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>证书的有效性认证原理</title>
    <link href="http://lvpika.github.io/2020/03/25/undefined/"/>
    <id>http://lvpika.github.io/2020/03/25/undefined/</id>
    <published>2020-03-25T03:42:45.000Z</published>
    <updated>2020-03-25T04:17:11.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="证书的有效性认证原理"><a href="#证书的有效性认证原理" class="headerlink" title="证书的有效性认证原理"></a>证书的有效性认证原理</h2><ol><li>用户访问某个网站，和网站建立连接</li><li>网站主动将CA颁发给它的证书发送给用户</li><li>用户用CA认证中心的公钥解密证书，能够正常解密，查看到网站的基本信息，即说明网站可信</li></ol><h2 id="认证证书的原理"><a href="#认证证书的原理" class="headerlink" title="认证证书的原理"></a>认证证书的原理</h2><ol><li>首先由三个角色<br> (1). 第一个是CA认证中心，相当于公安局<br> (2). 第二个是网站服务器，也是证书申请者<br> (3). 第三个是网站用户<h4 id="CA认证中心的作用"><a href="#CA认证中心的作用" class="headerlink" title="CA认证中心的作用"></a>CA认证中心的作用</h4></li><li>相当于公安局，给申请者办法证书<h4 id="申请者申请证书和CA认证中心颁发证书的过程-（相当于办身份证的过程）"><a href="#申请者申请证书和CA认证中心颁发证书的过程-（相当于办身份证的过程）" class="headerlink" title="申请者申请证书和CA认证中心颁发证书的过程 （相当于办身份证的过程）"></a>申请者申请证书和CA认证中心颁发证书的过程 （相当于办身份证的过程）</h4></li><li>申请者首先生成一个证书请求文件，然后将这俄格文件发送给CA认证中心，这个文件包含了，网站的国家，省份，城市，县，单位，部门，主机名，邮箱，等。这些信息就相当于户口本。</li><li>CA认证中心收到请求文件过后，首先会去考察，文件中的信息是否属实，也就是说，请求文件中那些信息是否属实，如果属实。</li><li>CA认证中心就用自己的私钥对申请者发来的请求文件进行加密。</li><li>然后将加密过后的请求文件发还给申请者，这个文件也就是证书。</li></ol><h4 id="为什么CA认证中心要用私钥对请求文件加密呢"><a href="#为什么CA认证中心要用私钥对请求文件加密呢" class="headerlink" title="为什么CA认证中心要用私钥对请求文件加密呢"></a>为什么CA认证中心要用私钥对请求文件加密呢</h4><ol><li>因为私钥加密的文件只能用和它相匹配的公钥解开，当CA认证中心成立的时候，就会生成一对密钥，也就是私钥和公钥，比较权威的CA认证机构的公钥，都已经内嵌在windows系统中，用户收到这个网站的证书的时候如果用CA的公钥能够解开，说明这个证书没有被纂改过，如果解不开就说明，这个证书不是被CA认证中心的私钥加密的证书，所以不可信，因为CA认证中心就相当于公安局，人们都相信它。也就是，如果在证书传送的过程中，被别人劫持并且用CA认证中心的公钥解开纂改了数据，它也没有办法用CA认证中心的私钥重新对数据进行加密，所以就算它将纂改后的证书文件发送给用户，用户无法解开，也就不会相信被纂改后的数据。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;证书的有效性认证原理&quot;&gt;&lt;a href=&quot;#证书的有效性认证原理&quot; class=&quot;headerlink&quot; title=&quot;证书的有效性认证原理&quot;&gt;&lt;/a&gt;证书的有效性认证原理&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;用户访问某个网站，和网站建立连接&lt;/li&gt;
&lt;li&gt;网站主动将C
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://lvpika.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://lvpika.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客文章中插入图片</title>
    <link href="http://lvpika.github.io/2020/03/22/undefined/"/>
    <id>http://lvpika.github.io/2020/03/22/undefined/</id>
    <published>2020-03-22T13:15:25.000Z</published>
    <updated>2020-03-25T04:17:29.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在编写Hexo博客文章的时候插入图片"><a href="#在编写Hexo博客文章的时候插入图片" class="headerlink" title="在编写Hexo博客文章的时候插入图片"></a>在编写Hexo博客文章的时候插入图片</h2><ol><li><p>如果用图床的链接之类的是不显示的</p></li><li><p>我百度到的一个解决办法，就是安装一个hexo插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image -- save</span><br></pre></td></tr></table></figure></li><li><p>然后修改Hexo的配置文件，将 post_asset_folder 的键值改为 true </p></li><li><p>然后在执行 hexo new 创建文章的时候，刚安装的插件会在目录下创建按一个同名的文件夹，你把要放在文章中的图片放在这个文件夹中，然后在文章中 调用图片即可 调用图片的语法如下，注意图片名字要加上后缀名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片名字]</span><br></pre></td></tr></table></figure></li></ol><h5 id="然后就没有了"><a href="#然后就没有了" class="headerlink" title="然后就没有了"></a>然后就没有了</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;在编写Hexo博客文章的时候插入图片&quot;&gt;&lt;a href=&quot;#在编写Hexo博客文章的时候插入图片&quot; class=&quot;headerlink&quot; title=&quot;在编写Hexo博客文章的时候插入图片&quot;&gt;&lt;/a&gt;在编写Hexo博客文章的时候插入图片&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="博客" scheme="http://lvpika.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://lvpika.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Github+hexo搭建免费的个人博客</title>
    <link href="http://lvpika.github.io/2020/03/22/undefined/"/>
    <id>http://lvpika.github.io/2020/03/22/undefined/</id>
    <published>2020-03-22T12:20:44.000Z</published>
    <updated>2020-03-25T04:16:53.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="利用GitHub加上Hexo免费搭建个人博客"><a href="#利用GitHub加上Hexo免费搭建个人博客" class="headerlink" title="利用GitHub加上Hexo免费搭建个人博客"></a>利用GitHub加上Hexo免费搭建个人博客</h2><hr><ol><li><p>搭建博客   更换皮肤   发布文章</p><ol><li><p>安装 Git，Node.js，Hexo，还有Hexo的插件 hexo-deployer-git，不然后面上传的时候会报：ERROR Deployer not found: git 错误</p></li><li><p>首先是安装Git 直接百度Git下载，记得找国内下载链接，可以百度到，不然速度慢的扣jio，下载号安装包过后就是直接安装，一直下一步就行，但是如果你改了安装目录，然后安装成功过后你发现，在命令行中git命令不能用，那么你得在环境变量中，添加相应的安装路径下的bin目录，你可以到Git的安装目录中的bin目录下看一下，git命令就在当中，反正就是让命令行可以用git命令即可，</p></li><li><p>然后是安装 Node.js，也是百度即可下载，这个也是要注意环境变量的问题，只要命令行不能用node命令，那么就是你的环境变量没有配置好，这个你就只需要添加安装目录就行。</p></li><li><p>然后是安装hexo，安装这个是在命令行当中安装，其它安装方法你可百度看看，命令如下，但是你先别急着安装，因为这个的下载速度可能会让你有点不知所措，所以我们得更换安装源，命令如下第二个</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">更换安装源</span><br><span class="line">npm set registry https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</span><br><span class="line">安装hexo</span><br><span class="line">npm i -g hexo</span><br></pre></td></tr></table></figure><p>  更换完安装源，那下载速度绝对是杠杠的</p></li><li><p>然后在Github中建立一个仓库，如果你连Github账号都没有的话，那你赶紧去注册一个吧。咳咳，注册完了过后，点击右上角头像，然后点击，Your repositories———&gt;New，如下图所示。<br><img src="/" alt="2.png" class="lazyload" data-src="https://s1.ax1x.com/2020/03/22/8IrdU0.png"></p></li><li><p>然后出现以下界面，上面个框框是仓库名称，这个仓库名称必须特别有讲究，名字必须是，你的Git用户名.github.io 这样的格式，也就是说，Repository name 当中写 Git用户名.github.io 这个也是你后面博客的地址。第二个框框是仓库的说明，你随便写一个即可。<br><img src="/" alt="3.png" class="lazyload" data-src="https://s1.ax1x.com/2020/03/22/8IrYuj.png"><br>然后点击 最下面的高亮的 Create repository 创建仓库</p></li><li><p>然后进入相应的仓库界面中 点击 图中的 clone or download 然后复制那个地址，那个是仓库地址，<br><img src="/" alt="5.png" class="lazyload" data-src="https://s1.ax1x.com/2020/03/22/8IyhcD.png"></p></li><li><p>复制完了过后，打开命令行窗口，新建一个hexo工程，命令如下，当中的blog是工程名字。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo inti blog</span><br></pre></td></tr></table></figure></li><li><p>等待它下载很多默认文件下载完成后，进入，blog文件夹，这个文件夹也在C:\Users\电脑管理员用户名 当中，命令如下</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br></pre></td></tr></table></figure></li><li><p>进入过后安装hexo插件，这个是部署工具，用来将博客部署到Git上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></li><li><p>然后我们可以先在本地当中预览一下我们的博客，执行以下命令，执行完毕后，你会看到输出了一个地址：<a href="http://localhost:4000，去浏览器当中输入这个地址，即可访问你的博客默认界面，会有一个默认的文章">http://localhost:4000，去浏览器当中输入这个地址，即可访问你的博客默认界面，会有一个默认的文章</a> 标题是Hello world，当然看起来似乎有点不养眼，但是这个外观是可以换的，有很多现成的皮肤。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean #清除以前生成的静态文件</span><br><span class="line">hexo g #生成新的静态文件</span><br><span class="line">hexo s #启动hexo服务</span><br></pre></td></tr></table></figure></li><li><p>现在只能够在你的电脑上访问，但是我们要做的是可以在所有电脑上都可以访问所以我们要把博客放在Git上托管。所以进行以下操作。</p></li><li><p>首先，打开资源管理器，进入C:\Users\电脑管理员用户名\blog 当中，如果你上面创建hexo工程的时候不是写的blog 这里就不是blog 。</p></li><li><p>接下来你会看到在目录中有一个叫 _config.yml 的文件 打开它，滑到最下面，你会看到这个样子的东西<br><img src="/" alt="6.png" class="lazyload" data-src="https://s1.ax1x.com/2020/03/22/8Ir8gg.png"><br>然后把它改成<br><img src="/" alt="7.png" class="lazyload" data-src="https://s1.ax1x.com/2020/03/22/8Irw5V.png"><br>这个样子，注意空格必须和它一样，冒号后面是由一个空格的。</p></li><li><p>然后初始化以下git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><ol start="5"><li>这里加一条我写完了才想起来，还需要执行一下这两条命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;你注册Git时填的邮箱&quot;</span><br><span class="line">git config --global user.name &quot;你的Git用户名&quot;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>然后执行以下命令 hexo d 就是部署博客到git当中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li><li><p>然后不出意外的话，你去访问 你的Git用户名.github.io 这个地址是可以看到你的博客了。</p></li><li><p>如果有问题的话 欢迎 发送我的邮箱 或者 加我的qq(邮箱前面的数字就是我的qq 邮箱在首页关于中有) 我非常愿意且非常想为你解决问题。</p></li></ol></li></ol><h5 id="接下来是给博客换皮肤"><a href="#接下来是给博客换皮肤" class="headerlink" title="接下来是给博客换皮肤"></a>接下来是给博客换皮肤</h5><ol><li>找一款你喜欢的皮肤，百度有一大堆，这里以一款简约风的皮肤做例子</li><li>首先复制皮肤的git地址 然后下载 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> 是皮肤的git地址， themes/next 是下载过后存放路径，皮肤必须的存在themes目录下，至于要叫什么名字，那就看你的想象了，这里叫它next。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure><ol start="3"><li>下载完毕后，进入hexo工程目录中，修改_config.yml配置文件，找到 thenms 字段 将它的键值修改为 next ，然后<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d #部署生成的静态文件到Git中</span><br></pre></td></tr></table></figure></li><li>然后去浏览器访问你的博客地址即可，如果还是原来的界面那你 ctrl+F5 强制刷新一下，如果还是不行，那还是联系我吧，就像上面我说的一样</li></ol></li></ol><h5 id="接下来是编写博客文章"><a href="#接下来是编写博客文章" class="headerlink" title="接下来是编写博客文章"></a>接下来是编写博客文章</h5><ol><li>在命令行中输入 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章标题&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li>然后进入到 C:\Users\电脑用户名\工程名\source_posts 目录当中 你会看到一个文件名是，你刚才新建文章时输入的文字，然后打开那个文件，不管你是用记事本，还是VsCode什么的，打开你就可以输入你的博客文章了，这个也是非常有讲究的，你可以用标准的Markdown语法来编写或者其他的等等，你可以结合默认的Hello World文章来看看。</li></ol></li></ol><h4 id="好了就到这里了，这是我刚刚搭建好我的博客就写下的教程，当中我也是搭建了好久，但是最终还是搭建成功了，踩了好多坑，欢迎在我的qq邮箱中留言或者加我qq一起讨论"><a href="#好了就到这里了，这是我刚刚搭建好我的博客就写下的教程，当中我也是搭建了好久，但是最终还是搭建成功了，踩了好多坑，欢迎在我的qq邮箱中留言或者加我qq一起讨论" class="headerlink" title="好了就到这里了，这是我刚刚搭建好我的博客就写下的教程，当中我也是搭建了好久，但是最终还是搭建成功了，踩了好多坑，欢迎在我的qq邮箱中留言或者加我qq一起讨论"></a>好了就到这里了，这是我刚刚搭建好我的博客就写下的教程，当中我也是搭建了好久，但是最终还是搭建成功了，踩了好多坑，欢迎在我的qq邮箱中留言或者加我qq一起讨论</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;利用GitHub加上Hexo免费搭建个人博客&quot;&gt;&lt;a href=&quot;#利用GitHub加上Hexo免费搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;利用GitHub加上Hexo免费搭建个人博客&quot;&gt;&lt;/a&gt;利用GitHub加上Hexo免费搭建个人
      
    
    </summary>
    
    
      <category term="博客相关" scheme="http://lvpika.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="博客" scheme="http://lvpika.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
